import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,f as i}from"./app-B5wQ218V.js";const o="/my-docs/assets/img_8-C0U_ljQE.png",n="/my-docs/assets/img_6-CIAL4PU_.png",a="/my-docs/assets/img_6-CIAL4PU_.png",l="/my-docs/assets/img_4-CIFFLZCe.png",p="/my-docs/assets/img_5-sTx_Ss0S.png",r="/my-docs/assets/img_9-20n_TOcQ.png",c="/my-docs/assets/img_10-BK2S6U8S.png",m="/my-docs/assets/img_11-DW0iiUMe.png",g="/my-docs/assets/img_12-vtfGq6VL.png",d="/my-docs/assets/img_13-BJX70dN9.png",y={},u=i('<h1 id="mysql索引" tabindex="-1"><a class="header-anchor" href="#mysql索引"><span>mysql索引</span></a></h1><h2 id="mysql索引的分类" tabindex="-1"><a class="header-anchor" href="#mysql索引的分类"><span>mysql索引的分类</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>分为<strong>聚簇索引和非聚簇索引两大类</strong> 聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点</p><p>二级索引(非聚簇索引）的叶子节点存放的是主键值，而不是实际数据， 如果要查询的列走了二级索引，而叶子节点存放的值没有恰好全部包含自己要查询的数据列，那么就会进行<strong>回表查询</strong> 如果恰好包含，那么就是<strong>覆盖索引</strong></p><p><strong>聚簇索引必须有且只有一个</strong>，也就是主键索引，二级索引可以有多个</p></div><p><img src="'+o+'" alt="img_8.png" loading="lazy"><strong>主键索引：</strong>：</p><blockquote><p>图源网络： <img src="'+n+'" alt="img_6.png" loading="lazy"><strong>二级索引：</strong>： 图源网络： <img src="'+a+'" alt="img_7.png" loading="lazy"></p></blockquote><h3 id="索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引的优缺点"><span>索引的优缺点</span></a></h3><blockquote><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。(因为索引是个有序的结构)</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li><p>索引会占用存储空间。</p></li><li><p>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率，</p><p><strong>因为如果更新的某个列创建了索引，那么相应的索引列也得更新。</strong></p></li></ol></blockquote><blockquote><p>测试没有使用索引的查询：</p></blockquote><figure><img src="'+l+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><blockquote><p>添加索引后查询：</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div></blockquote><blockquote></blockquote><figure><img src="'+p+'" alt="img_5.png" tabindex="0" loading="lazy"><figcaption>img_5.png</figcaption></figure><h2 id="mysql索引底层结构" tabindex="-1"><a class="header-anchor" href="#mysql索引底层结构"><span>mysql索引底层结构</span></a></h2><blockquote></blockquote><figure><img src="'+r+'" alt="img_9.png" tabindex="0" loading="lazy"><figcaption>img_9.png</figcaption></figure><p>在没有了解B+Tree结构前，回顾下之前所学习的树结构：</p><blockquote><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p><p>为什么要这样设计呢：</p><ul><li>因为这样可以提高查询，插入删除的效率，如果要找的target大，那么就可以去节点的左子树查找，反之就去它的右边查找，避免一个盲目遍历的过程</li></ul></blockquote><figure><img src="'+c+'" alt="img_10.png" tabindex="0" loading="lazy"><figcaption>img_10.png</figcaption></figure><blockquote><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><figure><img src="'+m+'" alt="img_11.png" tabindex="0" loading="lazy"><figcaption>img_11.png</figcaption></figure><blockquote><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><figure><img src="'+g+'" alt="img_12.png" tabindex="0" loading="lazy"><figcaption>img_12.png</figcaption></figure><blockquote><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><h3 id="为什么不采用二叉搜索树或者是红黑树来作为索引的结构" tabindex="-1"><a class="header-anchor" href="#为什么不采用二叉搜索树或者是红黑树来作为索引的结构"><span>为什么不采用二叉搜索树或者是红黑树来作为索引的结构？（*）</span></a></h3><blockquote><p>因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。会导致在数据量大的情况下，树的层级比较深，会影响检索速度。树的高度一旦高了，磁盘IO的次数就会增多，检索速度就会降低。</p></blockquote><details><summary>答案</summary> 因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。会导致在数据量大的情况下，树的层级比较深，会影响检索速度。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。 </details><blockquote><p>磁盘IO的时间： 寻找扇区的旋转时间+寻道时间+数据传输时间 <img src="'+d+'" alt="img_13.png" loading="lazy"></p></blockquote><p>（等待编辑....)</p>',28),_=[u];function h(q,b){return e(),s("div",null,_)}const v=t(y,[["render",h],["__file","mysql索引.html.vue"]]),x=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%B4%A2%E5%BC%95.html","title":"mysql索引","lang":"zh-CN","frontmatter":{"cover":"/assets/images/cover2.jpg","icon":"pen-to-square","date":"2024-05-05T00:00:00.000Z","category":["数据库"],"tag":["数据库"],"star":true,"sticky":true,"description":"mysql索引 mysql索引的分类 提示 分为聚簇索引和非聚簇索引两大类 聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点 二级索引(非聚簇索引）的叶子节点存放的是主键值，而不是实际数据， 如果要查询的列走了二级索引，而叶子节点存放的值没有恰好全部包含自己要查询的数据列，那么就会进行回表查询 如果恰好包含，那么就是覆盖...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/my-docs/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%B4%A2%E5%BC%95.html"}],["meta",{"property":"og:site_name","content":"主页"}],["meta",{"property":"og:title","content":"mysql索引"}],["meta",{"property":"og:description","content":"mysql索引 mysql索引的分类 提示 分为聚簇索引和非聚簇索引两大类 聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点 二级索引(非聚簇索引）的叶子节点存放的是主键值，而不是实际数据， 如果要查询的列走了二级索引，而叶子节点存放的值没有恰好全部包含自己要查询的数据列，那么就会进行回表查询 如果恰好包含，那么就是覆盖..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/my-docs/assets/images/cover2.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-16T08:15:38.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://mister-hope.github.io/my-docs/assets/images/cover2.jpg"}],["meta",{"name":"twitter:image:alt","content":"mysql索引"}],["meta",{"property":"article:author","content":"MiniW"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2024-05-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-16T08:15:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql索引\\",\\"image\\":[\\"https://mister-hope.github.io/my-docs/assets/images/cover2.jpg\\"],\\"datePublished\\":\\"2024-05-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-16T08:15:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MiniW\\"}]}"]]},"headers":[{"level":2,"title":"mysql索引的分类","slug":"mysql索引的分类","link":"#mysql索引的分类","children":[{"level":3,"title":"索引的优缺点","slug":"索引的优缺点","link":"#索引的优缺点","children":[]}]},{"level":2,"title":"mysql索引底层结构","slug":"mysql索引底层结构","link":"#mysql索引底层结构","children":[{"level":3,"title":"为什么不采用二叉搜索树或者是红黑树来作为索引的结构？（*）","slug":"为什么不采用二叉搜索树或者是红黑树来作为索引的结构","link":"#为什么不采用二叉搜索树或者是红黑树来作为索引的结构","children":[]}]}],"git":{"createdTime":1715147656000,"updatedTime":1726474538000,"contributors":[{"name":"MiniWH","email":"122033963+MiniWwww@users.noreply.github.com","commits":6}]},"readingTime":{"minutes":2.9,"words":871},"filePathRelative":"posts/数据库/mysql索引.md","localizedDate":"2024年5月5日","excerpt":"\\n<h2>mysql索引的分类</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>分为<strong>聚簇索引和非聚簇索引两大类</strong>\\n聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点</p>\\n<p>二级索引(非聚簇索引）的叶子节点存放的是主键值，而不是实际数据，\\n如果要查询的列走了二级索引，而叶子节点存放的值没有恰好全部包含自己要查询的数据列，那么就会进行<strong>回表查询</strong>\\n如果恰好包含，那么就是<strong>覆盖索引</strong></p>\\n<p><strong>聚簇索引必须有且只有一个</strong>，也就是主键索引，二级索引可以有多个</p>\\n</div>","autoDesc":true}');export{v as comp,x as data};
