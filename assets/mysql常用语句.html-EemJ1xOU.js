import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,f as e}from"./app-B5wQ218V.js";const a={},d=e(`<h1 id="待定名称" tabindex="-1"><a class="header-anchor" href="#待定名称"><span>待定名称</span></a></h1><h2 id="sql-分类" tabindex="-1"><a class="header-anchor" href="#sql-分类"><span>SQL 分类</span></a></h2><ul><li>DDL（数据定义语言） <ul><li>定义数据库对象：<code>create</code>、<code>alter</code>、<code>drop</code></li></ul></li><li>DML（数据操纵语言） <ul><li>CRUD（增删改查）</li></ul></li><li>DCL（数据控制语言） <ul><li>可对数据访问权进行控制的指令</li></ul></li></ul><h3 id="dml-语言-数据操作语言-主要功能增删改查-crud" tabindex="-1"><a class="header-anchor" href="#dml-语言-数据操作语言-主要功能增删改查-crud"><span>DML 语言（数据操作语言）主要功能增删改查（CRUD）</span></a></h3><ul><li>查:（how）</li></ul><blockquote><p>Select</p></blockquote><h3 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总"><span>汇总</span></a></h3><ol><li><strong>SELECT</strong>：从数据库中选择数据。</li></ol><ul><li>示例：<code>SELECT column1, column2 FROM table_name;</code></li><li>解释：从&quot;table_name&quot;表中选择&quot;column1&quot;和&quot;column2&quot;列的数据。</li></ul><ol start="2"><li><strong>FROM</strong>：指定要查询数据的表。</li></ol><ul><li>示例：<code>SELECT column1 FROM table_name;</code></li><li>解释：从&quot;table_name&quot;表中选择&quot;column1&quot;列的数据。</li></ul><ol start="3"><li><strong>WHERE</strong>：筛选符合特定条件的行。</li></ol><ul><li>示例：<code>SELECT column1 FROM table_name WHERE condition;</code></li><li>解释：从&quot;table_name&quot;表中选择&quot;column1&quot;列的数据，其中满足特定条件的行。</li></ul><ol start="4"><li><strong>DISTINCT</strong>：去除结果中的重复行。</li></ol><ul><li>示例：<code>SELECT DISTINCT column1 FROM table_name;</code></li><li>解释：从&quot;table_name&quot;表中选择唯一的&quot;column1&quot;值。</li></ul><ol start="5"><li><strong>ORDER BY</strong>：对结果进行排序。</li></ol><ul><li>示例：<code>SELECT column1 FROM table_name ORDER BY column1 ASC;</code></li><li>解释：从&quot;table_name&quot;表中选择&quot;column1&quot;列的数据，并按升序对结果进行排序。</li><li>降序：<strong>DESC</strong></li></ul><ol start="6"><li><strong>GROUP BY</strong>：根据一个或多个列对结果进行分组。</li></ol><ul><li>示例：<code>SELECT COUNT(*), column1 FROM table_name GROUP BY column1;</code></li><li>解释：对&quot;table_name&quot;表中的数据按照&quot;column1&quot;列进行分组，并统计每个分组中的行数。</li></ul><ol start="7"><li><strong>HAVING</strong>：对 GROUP BY 子句的结果进行过滤。</li></ol><ul><li><p>示例：<code>SELECT COUNT(*), column1 FROM table_name GROUP BY column1 HAVING COUNT(*) &gt; 1;</code></p></li><li><p>解释：对&quot;table_name&quot;表中的数据按照&quot;column1&quot;列进行分组，并只返回分组中行数大于 1 的分组结果。</p><ul><li>举例：</li></ul><blockquote><p>让我们为你创建一个简单的表格来演示。假设我们有一个名为<code>students</code>的表格，其中包含学生姓名和他们所在的班级。我们可以使用<code>HAVING</code>子句来过滤出每个班级中学生人数大于 1 的情况。</p></blockquote></li></ul><table><thead><tr><th>学生姓名</th><th>班级</th></tr></thead><tbody><tr><td>小明</td><td>1班</td></tr><tr><td>小红</td><td>1班</td></tr><tr><td>小华</td><td>2班</td></tr><tr><td>小强</td><td>2班</td></tr><tr><td>小亮</td><td>3班</td></tr></tbody></table><p>现在，我们执行以下 SQL 查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class <span class="token keyword">FROM</span> students <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> class <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将返回如下结果：</p><table><thead><tr><th>COUNT(*)</th><th>班级</th></tr></thead><tbody><tr><td>2</td><td>1班</td></tr><tr><td>2</td><td>2班</td></tr></tbody></table><p>这说明在 1 班和 2 班中都有至少两个学生。</p><ol start="8"><li><strong>LIMIT</strong>：限制返回的行数。</li></ol><ul><li>示例：<code>SELECT column1 FROM table_name LIMIT 10;</code></li><li>解释：从&quot;table_name&quot;表中选择&quot;column1&quot;列的数据，最多返回 10 行。</li></ul><h3 id="辅助关键词" tabindex="-1"><a class="header-anchor" href="#辅助关键词"><span>辅助关键词：</span></a></h3><ul><li>Distinct：（what)去重，有可能返回多个相同的行，只要一行</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">SELECT</span> <span class="token constant">DISTINCT</span>
 vend_id <span class="token class-name">FROM</span> products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个 SQL 查询语句的意思是从名为&quot;products&quot;的表中选择唯一的&quot;vend_id&quot;列。 它告诉数据库系统只返回&quot;products&quot;表中不重复的&quot;vend_id&quot;值。 这意味着如果&quot;products&quot;表中有多行具有相同的&quot;vend_id&quot;值， 那么在结果集中只会显示一个该值，不会重复出现。</p></blockquote><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>在 SQL 中，有许多常用的函数可以用于对数据进行操作、计算和转换。</p><blockquote><p>tips：先记住聚合函数吧</p></blockquote><ol><li><strong>聚合函数</strong>：</li></ol><ul><li><strong>COUNT()</strong>：计算行数或非 NULL 值的数量。</li><li><strong>SUM()</strong>：计算数值列的总和。</li><li><strong>AVG()</strong>：计算数值列的平均值。</li><li><strong>MIN()</strong>：找出数值列的最小值。</li><li><strong>MAX()</strong>：找出数值列的最大值。</li></ul><ol start="2"><li><strong>字符串函数</strong>：</li></ol><ul><li><strong>CONCAT()</strong>：连接字符串。</li><li><strong>SUBSTRING()</strong>：提取子字符串。</li><li><strong>UPPER()</strong>：将字符串转换为大写。</li><li><strong>LOWER()</strong>：将字符串转换为小写。</li><li><strong>LENGTH()</strong>：返回字符串的长度。</li></ul><ol start="3"><li><strong>日期和时间函数</strong>：</li></ol><ul><li><strong>NOW()</strong>：返回当前日期和时间。</li><li><strong>DATE()</strong>：从日期时间值中提取日期部分。</li><li><strong>TIME()</strong>：从日期时间值中提取时间部分。</li><li><strong>DATEDIFF()</strong>：计算两个日期之间的天数差。</li><li><strong>DATE_ADD()</strong> / <strong>DATE_SUB()</strong>：对日期进行加减操作。</li></ul><ol start="4"><li><strong>逻辑函数</strong>：</li></ol><ul><li><strong>IF()</strong> / <strong>CASE WHEN</strong>：条件判断函数。</li><li><strong>COALESCE()</strong>：返回参数列表中的第一个非 NULL 值。</li></ul><ol start="5"><li><strong>数学函数</strong>：</li></ol><ul><li><strong>ROUND()</strong>：四舍五入到指定的小数位数。</li><li><strong>ABS()</strong>：返回绝对值。</li><li><strong>CEIL()</strong> / <strong>FLOOR()</strong>：向上取整 / 向下取整。</li></ul><ol start="6"><li><strong>类型转换函数</strong>：</li></ol><ul><li><strong>CAST()</strong>：将一个类型转换为另一个类型。</li><li><strong>CONVERT()</strong>：将一个类型转换为另一个类型。</li></ul><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询"><span>多表查询</span></a></h2><h4 id="为了改善多表查询-产生了子查询、连接" tabindex="-1"><a class="header-anchor" href="#为了改善多表查询-产生了子查询、连接"><span>为了改善多表查询，产生了子查询、连接</span></a></h4><p>如果不采用子查询、连接查询，那么返回的是多个表的笛卡尔积</p><blockquote><p>例子：</p></blockquote><p>假设我们有两个表，一个是产品表，另一个是颜色表。</p><p><strong>Products 表：</strong></p><table><thead><tr><th>ProductID</th><th>ProductName</th></tr></thead><tbody><tr><td>1</td><td>Phone</td></tr><tr><td>2</td><td>Laptop</td></tr><tr><td>3</td><td>Tablet</td></tr></tbody></table><p><strong>Colors 表：</strong></p><table><thead><tr><th>ColorID</th><th>ColorName</th></tr></thead><tbody><tr><td>1</td><td>Red</td></tr><tr><td>2</td><td>Blue</td></tr><tr><td>3</td><td>Green</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> Products<span class="token punctuation">.</span>ProductName<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>ColorName
<span class="token keyword">FROM</span> Products
<span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> Colors<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>ProductName</th><th>ColorName</th></tr></thead><tbody><tr><td>Phone</td><td>Red</td></tr><tr><td>Phone</td><td>Blue</td></tr><tr><td>Phone</td><td>Green</td></tr><tr><td>Laptop</td><td>Red</td></tr><tr><td>Laptop</td><td>Blue</td></tr><tr><td>Laptop</td><td>Green</td></tr><tr><td>Tablet</td><td>Red</td></tr><tr><td>Tablet</td><td>Blue</td></tr><tr><td>Tablet</td><td>Green</td></tr></tbody></table><p>这些示例演示了在 SQL 中不同类型的连接以及它们如何应用于具体的表和数据。</p><h2 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询"><span>子查询</span></a></h2><ol><li>what</li></ol><blockquote><p>说法1：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</p><p>说法2：子查询就是将一个查询的结果作为另一个 SQL 语句（主查询）的数据来源，或者判断条件</p></blockquote><ol start="2"><li>为什么要用子查询（why) 使用子查询是因为有几个优势</li></ol><blockquote><ul><li>为了简化更复杂的查询，对数据进行过滤和筛选</li><li>为了可以进行数据比较，主查询可以利用子查询的结果进行进一步的条件判断</li></ul></blockquote><ol start="3"><li>如何使用子查询？（how）</li></ol><p>根据子查询结果不同，分为：</p><ol><li><p>标量子查询（子查询结果为单个值）</p><blockquote><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。 常用的操作符：= &lt;&gt; &gt; &gt;= &lt; &lt;=</p></blockquote></li><li><p>列子查询(子查询结果为一列或者多列)</p><blockquote><p>如果这里的“多列”恰好包含那个表一行的所有列，那么也相当于行查询了吧 常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</p></blockquote><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选1</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY同等，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有制必须满足</td></tr></tbody></table></li><li><p>行子查询(子查询结果为一行或多行)</p><blockquote><p>常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p></blockquote></li><li><p>表子查询(子查询结果为多行多列)</p><blockquote><p>常用的操作符：IN</p></blockquote></li></ol><p>​ 根据子查询位置，分为：</p><ol><li>WHERE之后</li><li>FROM之后</li><li>SELECT之后</li></ol><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>好的，下面我将根据子查询的不同类型提供详细的例子，包括数据表和解释。</p><h3 id="_1-标量子查询" tabindex="-1"><a class="header-anchor" href="#_1-标量子查询"><span>1. 标量子查询</span></a></h3><p><strong>数据表：</strong></p><p><strong>Employees 表：</strong></p><table><thead><tr><th>EmployeeID</th><th>EmployeeName</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>5000</td></tr><tr><td>2</td><td>Bob</td><td>7000</td></tr><tr><td>3</td><td>John</td><td>6000</td></tr><tr><td>4</td><td>Mary</td><td>8000</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> EmployeeName<span class="token punctuation">,</span> Salary
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> Salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Employees<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>此查询会返回薪水最高的员工姓名和薪水。子查询<code>(SELECT MAX(Salary) FROM Employees)</code>返回的是 Employees 表中的最高薪水，这个值是一个单一的数值。主查询使用这个值来筛选具有该薪水的员工。</p><p><strong>结果：</strong></p><table><thead><tr><th>EmployeeName</th><th>Salary</th></tr></thead><tbody><tr><td>Mary</td><td>8000</td></tr></tbody></table><h3 id="_2-列子查询-子查询结果为一列或者多列" tabindex="-1"><a class="header-anchor" href="#_2-列子查询-子查询结果为一列或者多列"><span>2. 列子查询(子查询结果为一列或者多列)</span></a></h3><p><strong>数据表：</strong></p><p><strong>Orders 表：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerID</th><th>OrderDate</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>2024-05-01</td></tr><tr><td>2</td><td>102</td><td>2024-05-02</td></tr><tr><td>3</td><td>103</td><td>2024-05-03</td></tr><tr><td>4</td><td>102</td><td>2024-05-04</td></tr></tbody></table><p><strong>Customers 表：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th></tr></thead><tbody><tr><td>101</td><td>John</td></tr><tr><td>102</td><td>Alice</td></tr><tr><td>103</td><td>Bob</td></tr><tr><td>104</td><td>Mary</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CustomerName
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate <span class="token operator">=</span> <span class="token string">&#39;2024-05-02&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>此查询会返回在 2024-05-02 下了订单的顾客姓名。子查询<code>(SELECT CustomerID FROM Orders WHERE OrderDate = &#39;2024-05-02&#39;)</code>返回在 2024-05-02 下订单的所有顾客 ID（只有这一列），这些 ID 组成了一个集合。主查询使用 IN 操作符筛选出顾客表中 ID 在这个集合中的顾客姓名。</p><p><strong>结果：</strong></p><table><thead><tr><th>CustomerName</th></tr></thead><tbody><tr><td>Alice</td></tr></tbody></table><h3 id="_3-行子查询" tabindex="-1"><a class="header-anchor" href="#_3-行子查询"><span>3. 行子查询</span></a></h3><p><strong>数据表：</strong></p><p><strong>Products 表：</strong></p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th></tr></thead><tbody><tr><td>1</td><td>Phone</td><td>200</td></tr><tr><td>2</td><td>Laptop</td><td>201</td></tr><tr><td>3</td><td>Tablet</td><td>202</td></tr><tr><td>4</td><td>Monitor</td><td>200</td></tr></tbody></table><p><strong>Suppliers 表：</strong></p><table><thead><tr><th>SupplierID</th><th>SupplierName</th></tr></thead><tbody><tr><td>200</td><td>Supplier A</td></tr><tr><td>201</td><td>Supplier B</td></tr><tr><td>202</td><td>Supplier C</td></tr><tr><td>203</td><td>Supplier D</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ProductName
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>ProductID<span class="token punctuation">,</span> SupplierID<span class="token punctuation">)</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductID<span class="token punctuation">,</span> SupplierID <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> SupplierID <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>此查询会返回由供应商 200 提供的产品名称。子查询<code>(SELECT ProductID, SupplierID FROM Products WHERE SupplierID = 200)</code>返回所有由供应商 200 提供的产品 ID 和供应商 ID 组成的行。主查询使用这些行来筛选出对应的产品名称。</p><p><strong>结果：</strong></p><table><thead><tr><th>ProductName</th></tr></thead><tbody><tr><td>Phone</td></tr><tr><td>Monitor</td></tr></tbody></table><h3 id="_4-表子查询" tabindex="-1"><a class="header-anchor" href="#_4-表子查询"><span>4. 表子查询</span></a></h3><p><strong>数据表：</strong></p><p><strong>Orders 表：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerID</th><th>OrderDate</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>2024-05-01</td></tr><tr><td>2</td><td>102</td><td>2024-05-02</td></tr><tr><td>3</td><td>103</td><td>2024-05-03</td></tr><tr><td>4</td><td>102</td><td>2024-05-04</td></tr></tbody></table><p><strong>OrderDetails 表：</strong></p><table><thead><tr><th>OrderDetailID</th><th>OrderID</th><th>ProductID</th><th>Quantity</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>10</td></tr><tr><td>2</td><td>2</td><td>2</td><td>5</td></tr><tr><td>3</td><td>3</td><td>3</td><td>7</td></tr><tr><td>4</td><td>4</td><td>1</td><td>3</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> OrderID<span class="token punctuation">,</span> OrderDate
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> OrderID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> OrderID <span class="token keyword">FROM</span> OrderDetails <span class="token keyword">WHERE</span> Quantity <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>此查询会返回订单数量大于 5 的订单 ID 和订单日期。子查询<code>(SELECT OrderID FROM OrderDetails WHERE Quantity &gt; 5)</code>返回所有订单数量大于 5 的订单 ID 组成的集合。主查询使用这些订单 ID 来筛选出相应的订单日期和订单 ID。</p><p><strong>结果：</strong></p><table><thead><tr><th>OrderID</th><th>OrderDate</th></tr></thead><tbody><tr><td>1</td><td>2024-05-01</td></tr><tr><td>3</td><td>2024-05-03</td></tr></tbody></table><h3 id="根据子查询位置" tabindex="-1"><a class="header-anchor" href="#根据子查询位置"><span>根据子查询位置</span></a></h3><h3 id="_1-在-where-之后" tabindex="-1"><a class="header-anchor" href="#_1-在-where-之后"><span>1. 在 WHERE 之后</span></a></h3><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> EmployeeName
<span class="token keyword">FROM</span> Employees
<span class="token keyword">WHERE</span> Salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Employees<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>在 WHERE 子句中使用子查询筛选出薪水最高的员工。</p><h3 id="_2-在-from-之后" tabindex="-1"><a class="header-anchor" href="#_2-在-from-之后"><span>2. 在 FROM 之后</span></a></h3><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Salary<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Salary <span class="token keyword">FROM</span> Employees <span class="token keyword">WHERE</span> Salary <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> HighSalaryEmployees<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>在 FROM 子句中使用子查询，创建一个临时表 HighSalaryEmployees，计算该表中薪水的平均值。</p><h3 id="_3-在-select-之后" tabindex="-1"><a class="header-anchor" href="#_3-在-select-之后"><span>3. 在 SELECT 之后</span></a></h3><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> EmployeeName<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Employees<span class="token punctuation">)</span> <span class="token keyword">AS</span> MaxSalary
<span class="token keyword">FROM</span> Employees<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><p>在 SELECT 子句中使用子查询，返回每个员工的姓名以及公司中的最高薪水。</p><h2 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询"><span>连接查询</span></a></h2><ul><li><p>什么是连接？</p><ul><li>连接（join）是一种用于将两个或多个表中的数据组合在一起的操作。（先记住这一个）</li><li>连接通常基于表之间的共同列（通常是主键和外键），并且它们允许您在查询中使用相关联的数据。</li><li>连接表时需要在每个表中选择一个字段，并对这些字段的值进行比较，值相同的两条记录将合并为一条，连接表的本质就是将不同表的记录合并起来，形成一张新表。当然，这张新表只是<strong>临时</strong>的，它仅存在于本次查询期间。</li></ul></li><li><p>为什么需要连接（why)?</p><ul><li>连接有以下这些优势 <ul><li>数据整合，通过连接可以将多个表的数据整合起来</li><li>数据分析和报告，通过数据整合可以生成所需要的分析与报告</li></ul></li></ul></li><li><p>如何使用连接？（how)</p><blockquote><p>常见的连接类型包括：</p></blockquote></li></ul><ol><li><p>内连接（Inner Join）：返回两个表中共有的行，这些行满足连接条件。</p><blockquote><p>语法分为隐式内连接、显示内连接两种</p></blockquote></li><li><p>外连接（Outer Join）：包括左外连接（Left Outer Join）、右外连接（Right Outer Join）和全外连接（Full Outer Join），它们分别返回左表的所有行、右表的所有行或者两个表的所有行，以及匹配的行。</p><blockquote><p>而我们在日常开发使用时，更偏向于左外连接。</p></blockquote></li><li><p>自连接（Self Join）：将表与自身连接，常用于比较同一表中不同行的数据。</p><p>3.1 对于普通自连接查询，可以是内连接查询，也可以是外连接查询</p><blockquote><p>注意事项: 在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底 是哪一张表的字段</p></blockquote><p>3.2 联合查询</p><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><blockquote><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致（所以一般是自连接，两张相同的表联合查询）。 <code> union all</code> 会将全部的数据直接合并在一起，<code>union </code>会对合并之后的数据去重。</p></blockquote></li></ol><h4 id="用图表看出差别" tabindex="-1"><a class="header-anchor" href="#用图表看出差别"><span>用图表看出差别：</span></a></h4><p>1.内连接（取交集）</p><p>2.外连接（取交集和一边的数据）</p><p>以下是一些具有示例数据的表和相应的连接查询。</p><p>假设我们有两个表：<code>Orders</code>（订单）和 <code>Customers</code>（顾客）。</p><p><strong>Orders 表：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerID</th><th>OrderDate</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>2024-05-01</td></tr><tr><td>2</td><td>102</td><td>2024-05-02</td></tr><tr><td>3</td><td>103</td><td>2024-05-03</td></tr><tr><td>4</td><td>102</td><td>2024-05-04</td></tr></tbody></table><p><strong>Customers 表：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th></tr></thead><tbody><tr><td>101</td><td>John</td></tr><tr><td>102</td><td>Alice</td></tr><tr><td>103</td><td>Bob</td></tr><tr><td>104</td><td>Mary</td></tr></tbody></table><h3 id="_1-内连接-inner-join" tabindex="-1"><a class="header-anchor" href="#_1-内连接-inner-join"><span>1. <strong>内连接（Inner Join）</strong>：</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>CustomerName
<span class="token keyword">FROM</span> Orders
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerName</th></tr></thead><tbody><tr><td>1</td><td>John</td></tr><tr><td>2</td><td>Alice</td></tr><tr><td>3</td><td>Bob</td></tr><tr><td>4</td><td>Alice</td></tr></tbody></table><h3 id="_2-左外连接-left-outer-join" tabindex="-1"><a class="header-anchor" href="#_2-左外连接-left-outer-join"><span>2. <strong>左外连接（Left Outer Join）</strong>：</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>CustomerName
<span class="token keyword">FROM</span> Orders
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerName</th></tr></thead><tbody><tr><td>1</td><td>John</td></tr><tr><td>2</td><td>Alice</td></tr><tr><td>3</td><td>Bob</td></tr><tr><td>4</td><td>Alice</td></tr></tbody></table><p>注意：左外连接将保留左表（即 Orders 表）的所有行，即使右表（即 Customers 表）中没有匹配的行。</p><h3 id="_3-全外连接-将多个表左右拼起来-联合查询是将多个表上下拼起来" tabindex="-1"><a class="header-anchor" href="#_3-全外连接-将多个表左右拼起来-联合查询是将多个表上下拼起来"><span>3.全外连接（将多个表左右拼起来，联合查询是将多个表上下拼起来）</span></a></h3><p>全外连接（Full Outer Join）是一种连接操作，它返回两个表中所有行，即使它们没有匹配的行。全外连接的结果集包括左表和右表中的所有行，对于没有匹配的行，结果集中对应的列会包含空值（NULL）。</p><p>全外连接的语法通常是：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>common_column <span class="token operator">=</span> table2<span class="token punctuation">.</span>common_column<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例数据表：</strong></p><p><strong>Employees 表：</strong></p><table><thead><tr><th>EmployeeID</th><th>EmployeeName</th><th>DepartmentID</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>10</td></tr><tr><td>2</td><td>Bob</td><td>20</td></tr><tr><td>3</td><td>John</td><td>30</td></tr><tr><td>4</td><td>Mary</td><td>NULL</td></tr></tbody></table><p><strong>Departments 表：</strong></p><table><thead><tr><th>DepartmentID</th><th>DepartmentName</th></tr></thead><tbody><tr><td>10</td><td>HR</td></tr><tr><td>20</td><td>Engineering</td></tr><tr><td>30</td><td>Sales</td></tr><tr><td>40</td><td>Marketing</td></tr></tbody></table><p><strong>全外连接查询：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> Employees<span class="token punctuation">.</span>EmployeeID<span class="token punctuation">,</span> Employees<span class="token punctuation">.</span>EmployeeName<span class="token punctuation">,</span> Employees<span class="token punctuation">.</span>DepartmentID<span class="token punctuation">,</span>
       Departments<span class="token punctuation">.</span>DepartmentName
<span class="token keyword">FROM</span> Employees
<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> Departments
<span class="token keyword">ON</span> Employees<span class="token punctuation">.</span>DepartmentID <span class="token operator">=</span> Departments<span class="token punctuation">.</span>DepartmentID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>EmployeeID</th><th>EmployeeName</th><th>DepartmentID</th><th>DepartmentName</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>10</td><td>HR</td></tr><tr><td>2</td><td>Bob</td><td>20</td><td>Engineering</td></tr><tr><td>3</td><td>John</td><td>30</td><td>Sales</td></tr><tr><td>4</td><td>Mary</td><td>NULL</td><td>NULL</td></tr><tr><td>NULL</td><td>NULL</td><td>40</td><td>Marketing</td></tr></tbody></table><p><strong>解释：</strong></p><ul><li>表 <code>Employees</code> 中的 <code>EmployeeID</code> 列值为 1、2 和 3 的行，分别匹配到表 <code>Departments</code> 中的 <code>DepartmentID</code> 列值为 10、20 和 30 的行。</li><li>表 <code>Employees</code> 中 <code>EmployeeID</code> 列值为 4 的行，其 <code>DepartmentID</code> 为 <code>NULL</code>，因此结果集中 <code>DepartmentName</code> 列值也为 <code>NULL</code>。</li><li>表 <code>Departments</code> 中 <code>DepartmentID</code> 列值为 40 的行没有匹配到表 <code>Employees</code> 中的行，因此结果集中 <code>EmployeeID</code>、<code>EmployeeName</code> 和 <code>DepartmentID</code> 列值为 <code>NULL</code>。</li></ul><p>全外连接的结果集是左外连接（Left Outer Join）和右外连接（Right Outer Join）结果集的并集。</p><h3 id="_4-自连接-self-join" tabindex="-1"><a class="header-anchor" href="#_4-自连接-self-join"><span>4. <strong>自连接（Self Join）</strong>：</span></a></h3><p>假设我们有一个员工表，包含员工的 ID、姓名和经理的 ID。</p><p><strong>Employees 表：</strong></p><table><thead><tr><th>EmployeeID</th><th>EmployeeName</th><th>ManagerID</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>3</td></tr><tr><td>2</td><td>Bob</td><td>3</td></tr><tr><td>3</td><td>John</td><td>NULL</td></tr><tr><td>4</td><td>Mary</td><td>2</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e1<span class="token punctuation">.</span>EmployeeName <span class="token keyword">AS</span> Employee<span class="token punctuation">,</span> e2<span class="token punctuation">.</span>EmployeeName <span class="token keyword">AS</span> Manager
<span class="token keyword">FROM</span> Employees e1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Employees e2 <span class="token keyword">ON</span> e1<span class="token punctuation">.</span>ManagerID <span class="token operator">=</span> e2<span class="token punctuation">.</span>EmployeeID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>Employee</th><th>Manager</th></tr></thead><tbody><tr><td>Alice</td><td>John</td></tr><tr><td>Bob</td><td>John</td></tr><tr><td>Mary</td><td>Bob</td></tr></tbody></table><h3 id="_5-联合查询-联合查询是将多个表上下拼起来" tabindex="-1"><a class="header-anchor" href="#_5-联合查询-联合查询是将多个表上下拼起来"><span>5.联合查询（联合查询是将多个表上下拼起来）</span></a></h3><p>联合查询（UNION）用于将多个查询的结果合并成一个结果集。使用 <code>UNION</code> 时，查询的结果集必须具有相同的列数和相同的数据类型。<code>UNION ALL</code> 会将所有结果集直接合并在一起，而 <code>UNION</code> 会对合并后的结果进行去重。</p><p><strong>示例数据表：</strong></p><p><strong>Table3 表：</strong></p><table><thead><tr><th>ID</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>25</td></tr><tr><td>2</td><td>Bob</td><td>30</td></tr></tbody></table><p><strong>Table4 表：</strong></p><table><thead><tr><th>ID</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>2</td><td>Bob</td><td>30</td></tr><tr><td>3</td><td>Carol</td><td>27</td></tr></tbody></table><h3 id="使用-union-去重的查询" tabindex="-1"><a class="header-anchor" href="#使用-union-去重的查询"><span>使用 <code>UNION</code> 去重的查询：</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Age <span class="token keyword">FROM</span> Table3
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Age <span class="token keyword">FROM</span> Table4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>ID</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>25</td></tr><tr><td>2</td><td>Bob</td><td>30</td></tr><tr><td>3</td><td>Carol</td><td>27</td></tr></tbody></table><h3 id="使用-union-all-不去重的查询" tabindex="-1"><a class="header-anchor" href="#使用-union-all-不去重的查询"><span>使用 <code>UNION ALL</code> 不去重的查询：</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Age <span class="token keyword">FROM</span> Table3
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Age <span class="token keyword">FROM</span> Table4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><table><thead><tr><th>ID</th><th>Name</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>25</td></tr><tr><td>2</td><td>Bob</td><td>30</td></tr><tr><td>2</td><td>Bob</td><td>30</td></tr><tr><td>3</td><td>Carol</td><td>27</td></tr></tbody></table><p>在这个示例中，<code>UNION</code> 去除了重复的行，而 <code>UNION ALL</code> 则保留了所有行，包括重复的行。</p>`,195),l=[d];function o(r,p){return s(),n("div",null,l)}const u=t(a,[["render",o],["__file","mysql常用语句.html.vue"]]),h=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%BE%85%E5%AE%8C%E5%B7%A5/mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html","title":"待定名称","lang":"zh-CN","frontmatter":{"cover":"/assets/images/cover2.jpg","icon":"pen-to-square","date":"2024-05-05T00:00:00.000Z","category":["数据库"],"tag":["红","圆"],"star":true,"sticky":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"SQL 分类","slug":"sql-分类","link":"#sql-分类","children":[{"level":3,"title":"DML 语言（数据操作语言）主要功能增删改查（CRUD）","slug":"dml-语言-数据操作语言-主要功能增删改查-crud","link":"#dml-语言-数据操作语言-主要功能增删改查-crud","children":[]},{"level":3,"title":"汇总","slug":"汇总","link":"#汇总","children":[]},{"level":3,"title":"辅助关键词：","slug":"辅助关键词","link":"#辅助关键词","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"多表查询","slug":"多表查询","link":"#多表查询","children":[]},{"level":2,"title":"子查询","slug":"子查询","link":"#子查询","children":[{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"1. 标量子查询","slug":"_1-标量子查询","link":"#_1-标量子查询","children":[]},{"level":3,"title":"2. 列子查询(子查询结果为一列或者多列)","slug":"_2-列子查询-子查询结果为一列或者多列","link":"#_2-列子查询-子查询结果为一列或者多列","children":[]},{"level":3,"title":"3. 行子查询","slug":"_3-行子查询","link":"#_3-行子查询","children":[]},{"level":3,"title":"4. 表子查询","slug":"_4-表子查询","link":"#_4-表子查询","children":[]},{"level":3,"title":"根据子查询位置","slug":"根据子查询位置","link":"#根据子查询位置","children":[]},{"level":3,"title":"1. 在 WHERE 之后","slug":"_1-在-where-之后","link":"#_1-在-where-之后","children":[]},{"level":3,"title":"2. 在 FROM 之后","slug":"_2-在-from-之后","link":"#_2-在-from-之后","children":[]},{"level":3,"title":"3. 在 SELECT 之后","slug":"_3-在-select-之后","link":"#_3-在-select-之后","children":[]}]},{"level":2,"title":"连接查询","slug":"连接查询","link":"#连接查询","children":[{"level":3,"title":"1. 内连接（Inner Join）：","slug":"_1-内连接-inner-join","link":"#_1-内连接-inner-join","children":[]},{"level":3,"title":"2. 左外连接（Left Outer Join）：","slug":"_2-左外连接-left-outer-join","link":"#_2-左外连接-left-outer-join","children":[]},{"level":3,"title":"3.全外连接（将多个表左右拼起来，联合查询是将多个表上下拼起来）","slug":"_3-全外连接-将多个表左右拼起来-联合查询是将多个表上下拼起来","link":"#_3-全外连接-将多个表左右拼起来-联合查询是将多个表上下拼起来","children":[]},{"level":3,"title":"4. 自连接（Self Join）：","slug":"_4-自连接-self-join","link":"#_4-自连接-self-join","children":[]},{"level":3,"title":"5.联合查询（联合查询是将多个表上下拼起来）","slug":"_5-联合查询-联合查询是将多个表上下拼起来","link":"#_5-联合查询-联合查询是将多个表上下拼起来","children":[]},{"level":3,"title":"使用 UNION 去重的查询：","slug":"使用-union-去重的查询","link":"#使用-union-去重的查询","children":[]},{"level":3,"title":"使用 UNION ALL 不去重的查询：","slug":"使用-union-all-不去重的查询","link":"#使用-union-all-不去重的查询","children":[]}]}],"git":{"createdTime":1715068912000,"updatedTime":1726469543000,"contributors":[{"name":"MiniWH","email":"122033963+MiniWwww@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":12.69,"words":3806},"filePathRelative":"posts/数据库/待完工/mysql常用语句.md","localizedDate":"2024年5月5日"}');export{u as comp,h as data};
